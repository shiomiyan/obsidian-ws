---
description: 
globs: 
alwaysApply: true
---
## コーディングポリシー

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する

### 型定義の方針

- 可能な限り具体的な型を使用し、any の使用を避ける
- 共通の型パターンには Utility Types を活用する
- 型エイリアスは意味のある名前をつけ、型の意図を明確にする

```ts
// 良い例
type UserId = string;
type UserData = {
  id: UserId;
  createdAt: Date;
};

// 避けるべき例
type Data = any;
```

## テストの書き方

`@std/expect` と `@std/testing/bdd` を使う。
とくに実装上の理由がない限り、 `describe` による入れ子はしない。

```ts
import { expect } from "@std/expect";
import { test } from "@std/testing/bdd";

test("2+3=5", () => {
  expect(add(2, 3)).toBe(5);
});
```

## 実装指針

ライブラリの参照に `jsr:` や `npm:` を推奨しない。モジュールを参照する場合、 `deno add jsr:@david/dax@0.42.0` のようにして、 `deno.json` に依存を追加する。

```ts
// OK
import $ from "@david/dax";

// NG
import $ from "jsr:@david/dax@0.42.0";
```

### import ルール

- モジュール間の参照は必ず mod.ts を経由する
- 他のモジュールのファイルを直接参照してはいけない
- 同一モジュール内のファイルは相対パスで参照する
- モジュール内の実装は deps.ts からの re-export を参照する

### 依存関係の検証

依存関係の検証には2つの方法があります。

1. コマンドラインでの検証
```bash
deno task check:deps
```

このコマンドは以下をチェックします：
- モジュール間の import が mod.ts を経由しているか
- 他のモジュールのファイルを直接参照していないか

2. リントプラグインによる検証
```bash
deno lint
```

mod-import リントルールが以下をチェックします：
- モジュール間の import が mod.ts を経由しているか
- 違反している場合、修正のヒントを提示

リントプラグインは IDE と統合することで、コーディング時にリアルタイムでフィードバックを得ることができます。

## コード品質の監視

### カバレッジ

カバレッジの取得には `deno task test:cov` を使用します。これは以下のコマンドのエイリアスです：

```bash
deno test --coverage=coverage && deno coverage coverage
```

カバレッジの目標値：
- 新規実装時は80%以上のカバレッジを目標とする
- 重要なビジネスロジックは90%以上を目指す

実行コードと純粋な関数を分離することで、高いカバレッジを維持します：
- 実装（lib.ts）: ロジックを純粋な関数として実装
- エクスポート（mod.ts）: 外部向けインターフェースの定義
- 実行（cli.ts）: エントリーポイントとデバッグコード

### デッドコード解析

- TSR (TypeScript Runtime) を使用してデッドコードを検出
- 未使用のエクスポートや関数を定期的に確認し削除

### 型定義による仕様抽出

- dts を使用して型定義から自動的にドキュメントを生成
- 型シグネチャに仕様を記述し、dts として抽出する
